"use strict";(self.webpackChunkagr_documentation=self.webpackChunkagr_documentation||[]).push([[3513],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,h=m["".concat(c,".").concat(u)]||m[u]||s[u]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4887:(e,t,n)=>{n.d(t,{UE:()=>i,V3:()=>d,h8:()=>o,qh:()=>c,y$:()=>a});n(87462),n(67294);var r=n(3905);const o=e=>{let{children:t,text:n}=e;return(0,r.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},n)},a=e=>{let{children:t}=e;return(0,r.kt)("span",{style:{color:"#faa"}},t)};function i(e){let{children:t,version:n}=e;const o="#ffffff";return(0,r.kt)("span",{style:{backgroundColor:"#414141",color:o,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},n)}function l(e,t,n,o){return(0,r.kt)("div",{style:{backgroundColor:o,color:n,border:"1px "+n+" solid",borderRadius:"5px",padding:".1rem .4rem"}},t)}const c=e=>{let{children:t}=e;return l(0,"Released","#afa","#181")},d=e=>{let{children:t}=e;return l(0,"Planned","#aff","#288")}},50302:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(87462),o=(n(67294),n(3905)),a=n(4887);const i={sidebar_position:1,title:"Overview"},l=void 0,c={unversionedId:"combat-module/combat-component/overview",id:"version-5.3.2/combat-module/combat-component/overview",title:"Overview",description:"The AGR Combat Component manages combat gameplay mechanics and handles registering and triggering tracer components.",source:"@site/versioned_docs/version-5.3.2/combat-module/combat-component/overview.mdx",sourceDirName:"combat-module/combat-component",slug:"/combat-module/combat-component/overview",permalink:"/AGR-Documentation/docs/combat-module/combat-component/overview",draft:!1,editUrl:"https://github.com/3StudioOnline/AGR-Documentation/edit/master/versioned_docs/version-5.3.2/combat-module/combat-component/overview.mdx",tags:[],version:"5.3.2",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"Blueprint Function Library",permalink:"/AGR-Documentation/docs/projectile-module/bpfl"},next:{title:"Functions",permalink:"/AGR-Documentation/docs/combat-module/combat-component/functions"}},d={},p=[{value:"Combat Component Settings",id:"combat-component-settings",level:2},{value:"Setup",id:"setup",level:3},{value:"Events",id:"events",level:2},{value:"On Hit",id:"on-hit",level:3},{value:"On Unique Hit",id:"on-unique-hit",level:3},{value:"On Tracer Updated",id:"on-tracer-updated",level:3}],s={toc:p};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"AGR Combat Component")," manages combat gameplay mechanics and handles registering and triggering tracer components."),(0,o.kt)("p",null,"Tracer components are used to simulate and detect hits or impacts during melee attacks, arcs, or other proximity-based combat logic."),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"AGR Trace Anim Notify State")," to control when registered tracers should start and end during animations."),(0,o.kt)("h2",{id:"combat-component-settings"},"Combat Component Settings"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Combat Component Settings",src:n(60271).Z,width:"316",height:"282"})),(0,o.kt)("h3",{id:"setup"},"Setup"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Segment Count")," : Specifies the number of points to be used for tracing by the tracer component. This value determines how many evenly distributed segments will be created along the path."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Trace Params")," : ",(0,o.kt)("a",{parentName:"li",href:"/docs/combat-module/types#trace-params"},"Parameters")," for trace operations used by the AGR tracer components.")),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"on-hit"},"On Hit"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"On Hit")," is triggered when a tracer component detects a hit."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Tracer Component")," ",(0,o.kt)(a.h8,{text:"1",mdxType:"Step"})," : Reference to the component that caused the hit."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Hit Result")," ",(0,o.kt)(a.h8,{text:"2",mdxType:"Step"})," : Details about the hit.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"On Hit",src:n(85237).Z,width:"280",height:"224"})),(0,o.kt)("h3",{id:"on-unique-hit"},"On Unique Hit"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"On Unique Hit")," is triggered when a unique hit (one actor per trace cycle) is detected by a tracer."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Tracer Component")," ",(0,o.kt)(a.h8,{text:"1",mdxType:"Step"})," : Reference to the component that caused the hit."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Hit Result")," ",(0,o.kt)(a.h8,{text:"2",mdxType:"Step"})," : Details about the unique hit.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"On Unique Hit",src:n(55975).Z,width:"322",height:"224"})),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},'You should implement logic to filter and define what a "unique" hit means for your use case.')),(0,o.kt)("h3",{id:"on-tracer-updated"},"On Tracer Updated"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"On Tracer Updated")," is triggered when a tracer is registered, unregistered, or has started/ended tracing."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Update Type")," ",(0,o.kt)(a.h8,{text:"1",mdxType:"Step"})," : Type of update (Registered, Unregistered, Started, Ended)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Tracer Id")," ",(0,o.kt)(a.h8,{text:"2",mdxType:"Step"})," : Gameplay tag used to identify the tracer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Tracer Component")," ",(0,o.kt)(a.h8,{text:"3",mdxType:"Step"})," : Reference to the component.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"On Tracer Updated",src:n(3178).Z,width:"350",height:"252"})),(0,o.kt)("p",null,"This component is designed to be extended and integrated with custom tracer implementations, such as sockets, arcs, or line traces."))}m.isMDXComponent=!0},60271:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/class-settings-a62b43ddd1a92362fc2fa39ef68be8c6.png"},85237:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/on-hit-77511fc80542b12e329eb2e0fd559d3d.png"},3178:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/on-tracer-updated-fa1b393e58d412c97356de909b7855d3.png"},55975:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/on-unique-hit-46fb64501b4c0eec324011ebcd3cb08f.png"}}]);