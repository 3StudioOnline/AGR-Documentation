"use strict";(self.webpackChunkagr_documentation=self.webpackChunkagr_documentation||[]).push([[7356],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,f=d["".concat(u,".").concat(m)]||d[m]||s[m]||i;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4887:(e,t,r)=>{r.d(t,{UE:()=>l,V3:()=>p,h8:()=>a,qh:()=>u,y$:()=>i});r(87462),r(67294);var n=r(3905);const a=e=>{let{children:t,text:r}=e;return(0,n.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},r)},i=e=>{let{children:t}=e;return(0,n.kt)("span",{style:{color:"#faa"}},t)};function l(e){let{children:t,version:r}=e;const a="#ffffff";return(0,n.kt)("span",{style:{backgroundColor:"#414141",color:a,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},r)}function o(e,t,r,a){return(0,n.kt)("div",{style:{backgroundColor:a,color:r,border:"1px "+r+" solid",borderRadius:"5px",padding:".1rem .4rem"}},t)}const u=e=>{let{children:t}=e;return o(0,"Released","#afa","#181")},p=e=>{let{children:t}=e;return o(0,"Planned","#aff","#288")}},51856:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));r(4887);const i={sidebar_position:5,title:"Types"},l=void 0,o={unversionedId:"combat-module/types",id:"version-5.3.2/combat-module/types",title:"Types",description:"Enums",source:"@site/versioned_docs/version-5.3.2/combat-module/types.mdx",sourceDirName:"combat-module",slug:"/combat-module/types",permalink:"/AGR-Documentation/docs/combat-module/types",draft:!1,editUrl:"https://github.com/3StudioOnline/AGR-Documentation/edit/master/versioned_docs/version-5.3.2/combat-module/types.mdx",tags:[],version:"5.3.2",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Types"},sidebar:"tutorialSidebar",previous:{title:"Blueprint Function Library",permalink:"/AGR-Documentation/docs/combat-module/bpfl"},next:{title:"FAQ",permalink:"/AGR-Documentation/docs/faq"}},u={},p=[{value:"Enums",id:"enums",level:2},{value:"Trace Mode",id:"trace-mode",level:3},{value:"Trace Shape",id:"trace-shape",level:3},{value:"Trace Hit Mode",id:"trace-hit-mode",level:3},{value:"Tracer Update Type",id:"tracer-update-type",level:3},{value:"Structs",id:"structs",level:2},{value:"Trace Params",id:"trace-params",level:3}],c={toc:p};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"enums"},"Enums"),(0,a.kt)("h3",{id:"trace-mode"},"Trace Mode"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Trace Mode")," enum value determines how trace points are used for performing\ntrace operations."),(0,a.kt)("p",null,"Values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Raycast"),": Trace along each arc segment from start to end."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Sweep"),": Trace between the current and previous points on the segment, as if sweeping through the arc.")),(0,a.kt)("h3",{id:"trace-shape"},"Trace Shape"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Trace Shape")," enum value specifies the geometric shape used during the trace operation."),(0,a.kt)("p",null,"Values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Line")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Box")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Sphere"))),(0,a.kt)("h3",{id:"trace-hit-mode"},"Trace Hit Mode"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Trace Hit Mode")," enum value specifies whether the AGR tracer component should detect a single hit or multiple hits."),(0,a.kt)("p",null,"Values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Single Hit")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Multiple Hits"))),(0,a.kt)("h3",{id:"tracer-update-type"},"Tracer Update Type"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Tracer Update type")," enum value specifies the state transitions of an AGR tracer component during its lifecycle."),(0,a.kt)("p",null,"Values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Registered")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Unregistered")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Started")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Ended"))),(0,a.kt)("h2",{id:"structs"},"Structs"),(0,a.kt)("h3",{id:"trace-params"},"Trace Params"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Trace Params")," struct holds parameters for trace operations used by the AGR tracer components."),(0,a.kt)("p",null,"Values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Trace Channel"),": The trace channel to use for the trace (e.g., camera, visibility, etc.)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Trace Complex"),": Whether to trace complex geometry (true) or simple collision shapes (false)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Ignore Self"),": Whether to ignore the actor initiating the trace."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Draw Debug Type"),": Type of debug visualization for the trace."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Draw Time"),": Duration for which debug visuals should persist (in seconds)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Single Frame Trace Color"),": Color used for single frame trace debug visuals."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Multi Frame Trace Color"),": Color used for multi frame trace debug visuals."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Trace Hit Color"),": Color used for debug visuals when a trace hits an actor.")))}s.isMDXComponent=!0}}]);