"use strict";(self.webpackChunkagr_documentation=self.webpackChunkagr_documentation||[]).push([[9805],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4887:(e,t,n)=>{n.d(t,{UE:()=>i,V3:()=>l,h8:()=>a,qh:()=>s,y$:()=>o});n(87462),n(67294);var r=n(3905);const a=e=>{let{children:t,text:n}=e;return(0,r.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},n)},o=e=>{let{children:t}=e;return(0,r.kt)("span",{style:{color:"#faa"}},t)};function i(e){let{children:t,version:n}=e;const a="#ffffff";return(0,r.kt)("span",{style:{backgroundColor:"#414141",color:a,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},n)}function c(e,t,n,a){return(0,r.kt)("div",{style:{backgroundColor:a,color:n,border:"1px "+n+" solid",borderRadius:"5px",padding:".1rem .4rem"}},t)}const s=e=>{let{children:t}=e;return c(0,"Released","#afa","#181")},l=e=>{let{children:t}=e;return c(0,"Planned","#aff","#288")}},79071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(87462),a=(n(67294),n(3905)),o=n(4887);const i={sidebar_position:1,title:"Overview"},c=void 0,s={unversionedId:"combat-module/socket-tracer-component/overview",id:"version-5.3.2/combat-module/socket-tracer-component/overview",title:"Overview",description:"The AGR Socket Tracer Component detects hits using socket-defined points on a mesh and customizable trace shapes.",source:"@site/versioned_docs/version-5.3.2/combat-module/socket-tracer-component/overview.mdx",sourceDirName:"combat-module/socket-tracer-component",slug:"/combat-module/socket-tracer-component/overview",permalink:"/AGR-Documentation/docs/combat-module/socket-tracer-component/overview",draft:!1,editUrl:"https://github.com/3StudioOnline/AGR-Documentation/edit/master/versioned_docs/version-5.3.2/combat-module/socket-tracer-component/overview.mdx",tags:[],version:"5.3.2",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/AGR-Documentation/docs/combat-module/combat-component/functions"},next:{title:"Overview",permalink:"/AGR-Documentation/docs/combat-module/arc-tracer-component/overview"}},l={},d=[{value:"Socket Tracer Settings",id:"socket-tracer-settings",level:2},{value:"Setup",id:"setup",level:3},{value:"Events",id:"events",level:2},{value:"On Trace Started",id:"on-trace-started",level:3},{value:"On Trace Ended",id:"on-trace-ended",level:3},{value:"On Hit",id:"on-hit",level:3},{value:"On Unique Hit",id:"on-unique-hit",level:3}],p={toc:d};function u(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"AGR Socket Tracer Component")," detects hits using socket-defined points on a mesh and customizable trace shapes.\nThis tracer is ideal for weapons or actions where spatial movement is defined by mesh sockets, such as sword swings,\nmelee punches, or whip-like attacks."),(0,a.kt)("p",null,"It supports different trace modes, shapes, hit modes, and the ability to override segment count and trace parameters\nfrom the combat component."),(0,a.kt)("h2",{id:"socket-tracer-settings"},"Socket Tracer Settings"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Socket Tracer Settings",src:n(8155).Z,width:"349",height:"211"})),(0,a.kt)("h3",{id:"setup"},"Setup"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Trace Mode")," : Determines how trace points are used during the trace operation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Trace Shape")," : Geometric shape used for tracing (e.g., line, sphere, capsule)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Trace Hit Mode")," : Whether to detect a single hit or multiple hits."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Mesh Component Tag")," : The tag used to identify the mesh component (e.g., skeletal or static) that provides sockets."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Sockets")," : List of socket names used to define the trace path. Requires at least two sockets."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Override Segment Count")," : If true, overrides the segment count from the combat component."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Overridden Segment Count")," : Custom segment count used for tracing. Only active if override is enabled."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Override Trace Params")," : If true, overrides the trace parameters from the combat component."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Overridden Trace Params")," : Custom trace parameters used for hit detection (trace channel, profile, ignored actors, etc.).")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"To ensure accuracy, the first socket in ",(0,a.kt)("inlineCode",{parentName:"p"},"Sockets")," should ideally be at the tip of the weapon (e.g., blade or fist).")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You can override the default segment count and trace parameters from the combat component for this individual tracer.")),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("h3",{id:"on-trace-started"},"On Trace Started"),(0,a.kt)("p",null,"Triggered when tracing begins."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"On Trace Started",src:n(52473).Z,width:"322",height:"140"})),(0,a.kt)("h3",{id:"on-trace-ended"},"On Trace Ended"),(0,a.kt)("p",null,"Triggered when tracing ends."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Trace Hit Result")," ",(0,a.kt)(o.h8,{text:"1",mdxType:"Step"})," : A wrapper containing all actors and their associated hit results.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"On Trace Ended",src:n(7891).Z,width:"364",height:"196"})),(0,a.kt)("h3",{id:"on-hit"},"On Hit"),(0,a.kt)("p",null,"Triggered for every hit during tracing."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Hit Result")," ",(0,a.kt)(o.h8,{text:"1",mdxType:"Step"})," : Data about the actor hit by the tracer.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"On Hit",src:n(20102).Z,width:"308",height:"196"})),(0,a.kt)("h3",{id:"on-unique-hit"},"On Unique Hit"),(0,a.kt)("p",null,"Triggered only for unique actor hits per trace cycle."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Hit Result")," ",(0,a.kt)(o.h8,{text:"1",mdxType:"Step"})," : Data about the unique hit.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"On Unique Hit",src:n(89760).Z,width:"350",height:"196"})),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"A unique hit means the same actor is only counted once during a trace cycle.")))}u.isMDXComponent=!0},8155:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/class-settings-3ac9c4397258b5edb67bc5d8bee193bf.png"},20102:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/on-hit-77afa1d27c3fadd0506b66e958107be9.png"},7891:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/on-trace-ended-dd1c9484029a4ea4675cb79b5e401e08.png"},52473:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/on-trace-started-0c3772eed9545ab0966f86abf9f89091.png"},89760:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/on-unique-hit-95bc2aff4be3549050f6bb2228a5e4f6.png"}}]);